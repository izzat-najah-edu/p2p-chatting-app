/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.networkhw2;

import java.awt.Color;
import java.awt.Dimension;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.Socket;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.text.BadLocationException;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;
import java.io.File;  // Import the File class
import java.io.FileNotFoundException;  // Import this class to handle errors
import java.io.FileReader;
import java.util.Scanner; // Import the Scanner class to read text files


public class Client extends javax.swing.JFrame {

	    /**
	     * Creates new form Client
	     */
	    DatagramSocket socket;
	    String userName;
	    String pass;

	    String localIp;
	    int localPort;
	    String remotIp;
	    int remotPort;
	    InetAddress remot_IPAddress;
	    byte[] S_buffer;
	    DatagramPacket sendpacket;
	    byte[] R_buffer;
	    DatagramPacket receive_packet;
	    boolean conn = false;
	    boolean logedin = false;
		private JLabel jLabel88;
	    

	    public Client() {
	        initComponents();
	        textPaneArea.setEditable(false);
	        Remot_IP.setEditable(false);
	        Remot_Port.setEditable(false);
	        inArea.setForeground(Color.GRAY);
	        inArea.setText("enter text here");
	        userName = "";
	        localIp = "";
	        localPort = 0;
	        remotIp = "";
	        remotPort = 0;
	        R_buffer = new byte[50];
	        receive_packet = new DatagramPacket(R_buffer, R_buffer.length);
	        pass="";
	        setSize(1300, 575);


	    }

	    /**
	     * This method is called from within the constructor to initialize the form.
	     * WARNING: Do NOT modify this code. The content of this method is always
	     * regenerated by the Form Editor.
	     */
	    @SuppressWarnings("unchecked")
	    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	    private void initComponents() {

	        jPanel1 = new javax.swing.JPanel();
	        jLabel1 = new javax.swing.JLabel();
	        jLabel88 = new javax.swing.JLabel();

	        username = new javax.swing.JTextField();
	        password = new javax.swing.JTextField();

	        login = new javax.swing.JButton();
	        jButton2 = new javax.swing.JButton();
	        jButton3 = new javax.swing.JButton();
	        Delete = new javax.swing.JButton();
	        Deleteall = new javax.swing.JButton();
	        jScrollPane2 = new javax.swing.JScrollPane();
	        inArea = new javax.swing.JTextArea();
	        jLabel2 = new javax.swing.JLabel();
	        jLabel3 = new javax.swing.JLabel();
	        serIp = new javax.swing.JTextField();
	        serPort = new javax.swing.JTextField();
	        jLabel4 = new javax.swing.JLabel();
	        jComboBox1 = new javax.swing.JComboBox<>();
	        jLabel5 = new javax.swing.JLabel();
	        jLabel6 = new javax.swing.JLabel();
	        Local_IP = new javax.swing.JTextField();
	        Local_Port = new javax.swing.JTextField();
	        Remot_IP = new javax.swing.JTextField();
	        jLabel7 = new javax.swing.JLabel();
	        jLabel8 = new javax.swing.JLabel();
	        Remot_Port = new javax.swing.JTextField();
	        jScrollPane3 = new javax.swing.JScrollPane();
	        online_user = new javax.swing.JList<>();
	        jLabel9 = new javax.swing.JLabel();
	        send = new javax.swing.JButton();
	        sendToAll = new javax.swing.JButton();
	        jLabel10 = new javax.swing.JLabel();
	        status = new javax.swing.JTextField();
	        jScrollPane4 = new javax.swing.JScrollPane();
	        textPaneArea = new javax.swing.JTextPane();
	        ColorsMap= new HashMap<String, float[]>();

	        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
	        addWindowListener(new java.awt.event.WindowAdapter() {
	            public void windowClosed(java.awt.event.WindowEvent evt) {
	                formWindowClosed(evt);
	            }
	            public void windowClosing(java.awt.event.WindowEvent evt) {
	                formWindowClosing(evt);
	            }
	        });

	        jPanel1.setBackground(new java.awt.Color(220, 220, 220));

	        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
	        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
	        jLabel1.setText("Username :");
	        jLabel88.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
	        jLabel88.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
	        jLabel88.setText("password :");

	        username.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
	        username.setToolTipText("");
	        username.setPreferredSize(new java.awt.Dimension(7, 28));
	        
	        password.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
	        password.setToolTipText("");
	        password.setPreferredSize(new java.awt.Dimension(7, 28));
	        
	        login.setBackground(new java.awt.Color(179, 179, 179));
	        login.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
	        login.setText("Login");
	        login.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
	        login.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                try {
						loginActionPerformed(evt);
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
	            }
	        });

	        jButton2.setBackground(new java.awt.Color(179, 179, 179));
	        jButton2.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
	        jButton2.setText("Logout");
	        jButton2.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                jButton2ActionPerformed(evt);
	            }
	        });

	        inArea.setColumns(20);
	        inArea.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
	        inArea.setLineWrap(true);
	        inArea.setRows(5);
	        inArea.setWrapStyleWord(true);
	        inArea.addFocusListener(new java.awt.event.FocusAdapter() {
	            public void focusGained(java.awt.event.FocusEvent evt) {
	                inAreaFocusGained(evt);
	            }
	            public void focusLost(java.awt.event.FocusEvent evt) {
	                inAreaFocusLost(evt);
	            }
	        });
	        jScrollPane2.setViewportView(inArea);

	        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
	        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
	        jLabel2.setText("TCP Server Port :");

	        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
	        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
	        jLabel3.setText("Avilable Interfaces");

	        serIp.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
	        serIp.setToolTipText("");
	        serIp.setPreferredSize(new java.awt.Dimension(7, 28));
	        serIp.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                serIpActionPerformed(evt);
	            }
	        });

	        serPort.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
	        serPort.setToolTipText("");
	        serPort.setPreferredSize(new java.awt.Dimension(7, 28));
	        serPort.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                serPortActionPerformed(evt);
	            }
	        });

	        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
	        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
	        jLabel4.setText("TCP Server IP :");

	        jComboBox1.setBackground(new java.awt.Color(233, 237, 251));
	        jComboBox1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
	        try {
				jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "WI-FI:"+InetAddress.getLocalHost().getHostAddress(), "Ethernet:169.254.49.56", "Loopback Pseudo-Interface 1:127.0.0.1" }));
			} catch (UnknownHostException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
//	        Local_IP.setEditable(false);
	        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
	        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
	        jLabel5.setText("  Local Port :");

	        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
	        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
	        jLabel6.setText("  Local IP :");

	        Local_IP.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
	        Local_IP.setToolTipText("");
	        Local_IP.setPreferredSize(new java.awt.Dimension(7, 28));
	        Local_IP.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                Local_IPActionPerformed(evt);
	            }
	        });
//	        Local_IP.setEditable(false);
//	        try {
//				Local_IP.setText(InetAddress.getLocalHost().getHostAddress());
//			} catch (UnknownHostException e) {
//				// TODO Auto-generated catch block
//				e.printStackTrace();
//			}

	        Local_Port.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
	        Local_Port.setToolTipText("");
	        Local_Port.setPreferredSize(new java.awt.Dimension(7, 28));
	        Local_Port.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                Local_PortActionPerformed(evt);
	            }
	        });

	        Remot_IP.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
	        Remot_IP.setToolTipText("");
	        Remot_IP.setPreferredSize(new java.awt.Dimension(7, 28));
	        Remot_IP.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                Remot_IPActionPerformed(evt);
	            }
	        });

	        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
	        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
	        jLabel7.setText("  Remote IP :");

	        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
	        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
	        jLabel8.setText("  Remote Port :");

	        Remot_Port.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
	        Remot_Port.setToolTipText("");
	        Remot_Port.setPreferredSize(new java.awt.Dimension(7, 28));
	        Remot_Port.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                Remot_PortActionPerformed(evt);
	            }
	        });

	        online_user.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
	            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
	                online_userValueChanged(evt);
	            }
	        });
	        jScrollPane3.setViewportView(online_user);

	        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
	        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
	        jLabel9.setText("Online Users");

	        send.setBackground(new java.awt.Color(179, 179, 179));
	        send.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
	        send.setText("Send");
	        send.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
	        send.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                sendActionPerformed(evt);
	            }
	        });

	        jButton3.setBackground(new java.awt.Color(179, 179, 179));
	        jButton3.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
	        jButton3.setText("Establish Connection");
	        jButton3.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
	        jButton3.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                 establishConnectionActionPerformed(evt);
	            }
	        });
	        Delete.setBackground(new java.awt.Color(179, 179, 179));
	        Delete.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
	        Delete.setText("Delete");
	        Delete.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
	        Delete.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                 deleteActionPerformed(evt);
	            }
	        });
	        Deleteall.setBackground(new java.awt.Color(179, 179, 179));
	        Deleteall.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
	        Deleteall.setText("Delete all");
	        Deleteall.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
	        Deleteall.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                 deleteallActionPerformed(evt);
	            }
	        });
       
	        sendToAll.setBackground(new java.awt.Color(179, 179, 179));
	        sendToAll.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
	        sendToAll.setText("Send to All");
	        sendToAll.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
	        sendToAll.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                sendToAllActionPerformed(evt);
	            }
	        });

	        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
	        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
	        jLabel10.setText("Status :");

	        status.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
	        status.setToolTipText("");
	        status.setPreferredSize(new java.awt.Dimension(7, 28));
	        status.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                statusActionPerformed(evt);
	            }
	        });

	        jScrollPane4.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

	        textPaneArea.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
	        textPaneArea.setFocusCycleRoot(false);
//	        textPaneArea.setPreferredSize(new Dimension(5,500));
	        jScrollPane4.setViewportView(textPaneArea);
	        

	        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
	        jPanel1.setLayout(jPanel1Layout);
	        jPanel1Layout.setHorizontalGroup(
	            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	            .addGroup(jPanel1Layout.createSequentialGroup()
	                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	                    .addGroup(jPanel1Layout.createSequentialGroup()
	                        .addContainerGap()
	                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
	                            .addGroup(jPanel1Layout.createSequentialGroup()
	                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
	                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
	                                .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
	                                .addGap(18, 18, 18)
	                                .addComponent(jLabel88, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)

	                                .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
	                                .addGap(18, 18, 18)
	                                
	                                .addComponent(login, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
	                                .addGap(18, 18, 18)
	                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
	                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 441, Short.MAX_VALUE)
	                            .addComponent(jScrollPane4))
	                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	                            .addGroup(jPanel1Layout.createSequentialGroup()
	                                .addGap(43, 43, 43)
	                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
	                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
	                                .addGap(18, 18, 18)
	                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
	                                    .addComponent(serIp, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE)
	                                    .addComponent(serPort, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
	                            .addGroup(jPanel1Layout.createParallelGroup()
	                                .addGap(30, 30, 30)
	                                .addComponent(send, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
									.addGap(18, 18, 18)
	                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
									.addGap(10, 20, 30)
	                                .addComponent(Delete, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
									.addGap(10, 20, 30)
	                                .addComponent(Deleteall, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
	                                .addGap(18, 18, 18)
	                                .addComponent(sendToAll, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
									)
	                           
	                            .addGroup(jPanel1Layout.createSequentialGroup()
	                                
		                               
	                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	                                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
	                                    .addGroup(jPanel1Layout.createSequentialGroup()
	                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
	                                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
	                                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
	                                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
	                                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
	                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
	                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
	                                            .addComponent(Local_IP, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
	                                            .addComponent(Local_Port, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
	                                            .addComponent(Remot_IP, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
	                                            .addComponent(Remot_Port, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)))
	                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))))
	                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE))
	                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
	                        .addGap(44, 44, 44)
	                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
	                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
	                        .addComponent(status, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
	                        .addGap(76, 76, 76)))
	                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
	                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
	                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 207, Short.MAX_VALUE))
	                .addContainerGap())
	        );
	        jPanel1Layout.setVerticalGroup(
	            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	            .addGroup(jPanel1Layout.createSequentialGroup()
	                .addContainerGap()
	                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
	                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
	                            .addGroup(jPanel1Layout.createSequentialGroup()
	                                .addGap(0, 0, Short.MAX_VALUE)
	                                .addComponent(send, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
									.addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
									.addComponent(Delete, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
									.addComponent(Deleteall, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(sendToAll, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
	                        .addGap(18, 18, 18)
	                           .addGroup(jPanel1Layout.createSequentialGroup()
	                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
	                                		
	                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
	                                    .addComponent(jLabel88, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)

	                                    .addComponent(login, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
	                                  
	                                  
	                                  .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
	                                    .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)

	                                  .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
	                                .addGap(18, 18, 18)
	                                .addComponent(jScrollPane4)
	                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
	                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)))
	                        .addGap(37, 37, 37)
	                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
	                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
	                            .addComponent(status, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
	                        .addGap(28, 28, 28))
	                    .addGroup(jPanel1Layout.createSequentialGroup()
	                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	                            .addGroup(jPanel1Layout.createSequentialGroup()
	                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
	                                    .addComponent(serIp, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
	                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
	                                .addGap(15, 15, 15))
	                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
	                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
	                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
	                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	                            .addGroup(jPanel1Layout.createSequentialGroup()
	                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
	                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
	                                    .addComponent(serPort, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
	                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
	                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
	                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
	                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
	                                .addGap(32, 32, 32)
	                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
	                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
	                                    .addComponent(Local_IP, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
	                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
	                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
	                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
	                                    .addComponent(Local_Port, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
	                                .addGap(28, 28, 28)
	                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
	                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
	                                    .addComponent(Remot_IP, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
	                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
	                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
	                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
	                                    .addComponent(Remot_Port, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
	                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 428, javax.swing.GroupLayout.PREFERRED_SIZE))
	                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
	        );

	        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
	        getContentPane().setLayout(layout);
	        layout.setHorizontalGroup(
	            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
	        );
	        layout.setVerticalGroup(
	            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
	        );

	        pack();
	    }// </editor-fold>//GEN-END:initComponents

	    DefaultListModel dlm;
	    DataInputStream dataFromServer;
	    DataInputStream DataInputStream;
	    DataOutputStream dataToServer;
	    Socket serverSocket;
	    Read r;
//	    ReceiveThread channel;
	    boolean t1 = false;
	    boolean j = false;
	    
	    
	    
	    private void loginActionPerformed(java.awt.event.ActionEvent evt) throws IOException {//GEN-FIRST:event_loginActionPerformed
	        // TODO add your handling code here:
	        if (username.getText().equals("") ||password.getText().equals("") ||serIp.getText().equals("") || Local_IP.getText().equals("")
	                || Local_Port.getText().equals("") || serPort.getText().equals("")) {
	            JOptionPane.showMessageDialog(null, "You should enter the following (TCP Port&IP, local Port&IP and your name and pass)");
	        } else if (!logedin) {
				userName = username.getText().trim();
				pass = password.getText().trim();
				if (username.getText().toLowerCase().equals("ali")&&password.getText().equals("1234") ||username.getText().toLowerCase().equals("saly")&&password.getText().equals("A20B")||username.getText().toLowerCase().equals("aws")&&password.getText().equals("ABcd")||username.getText().toLowerCase().equals("adam")&&password.getText().equals("1Cb2") ) {
					String TcpIP = serIp.getText();
					int TcpPort = Integer.valueOf(serPort.getText().trim());
					String localIP = Local_IP.getText();
					localPort = Integer.valueOf(Local_Port.getText().trim());
					conn = true;
					localIp = Local_IP.getText();
					localPort = Integer.parseInt(Local_Port.getText());
					try {
					    socket = new DatagramSocket(localPort);
					} catch (SocketException ex) {
					    Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
					}
					try {
					
					    serverSocket = new Socket(InetAddress.getByName(TcpIP), TcpPort, InetAddress.getByName(localIP), localPort);
					    dataFromServer = new DataInputStream(serverSocket.getInputStream());
					    dataToServer = new DataOutputStream(serverSocket.getOutputStream());
					    dataToServer.writeUTF(userName);
					    String s;
					
					    DataInputStream = new DataInputStream(serverSocket.getInputStream());
					    s = DataInputStream.readUTF();
					    if (s.equals("founded")) {
					        JOptionPane.showMessageDialog(null, "You are already login!\n", "ERROR", JOptionPane.ERROR_MESSAGE);
					    } else if (s.equals("accept")) {
					        dlm = new DefaultListModel();
					        online_user.setModel(dlm);
					        r = new Read(userName);
					        r.start();
					    }
					 
					    j = true;
					  
//					    channel = new ReceiveThread(this);
//					    channel.start();
					    t1 = true;
					    JOptionPane.showMessageDialog(null, "You are loged in successfully");
					    logedin = true;
						} catch (IOException ex) {
							JOptionPane.showMessageDialog(null, "The local port is used");
					}
				        } 
				else {
				        	JOptionPane.showMessageDialog(null, "not valid user name or pass");
				        }
			

	        }

	          
	    }//GEN-LAST:event_loginActionPerformed


	    class Read extends Thread {

	        String userName;

	        public Read(String userName) {
	            this.userName = userName;

	        }

	        public void run() {
	            while (j) {
	                try {
	                    String inputData = dataFromServer.readUTF();
	                    if (inputData.equals("logout")) {
	                        break;
	                    }
	                    if (inputData.contains("add to list")) {
	                        inputData = inputData.substring(11);
	                        dlm.clear();
	                        StringTokenizer st = new StringTokenizer(inputData, "&?");
	                        while (st.hasMoreTokens()) {
	                            String line = st.nextToken();
	                            String[] tokens = line.split(",");
	                            if (!tokens[0].equals(userName)) {
	                                String element = new String(tokens[0]+","+tokens[2] + "," + tokens[1]);
	                                dlm.addElement(element);
	                            }
	                        }
	                    }
	                } catch (IOException ex) {

	                }

	            }
	        }
	    }

	    private void serIpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serIpActionPerformed
	        // TODO add your handling code here:
	    }//GEN-LAST:event_serIpActionPerformed

	    private void serPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serPortActionPerformed
	        // TODO add your handling code here:
	    }//GEN-LAST:event_serPortActionPerformed

	    private void Local_IPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Local_IPActionPerformed
	        // TODO add your handling code here:
	    }//GEN-LAST:event_Local_IPActionPerformed

	    private void Local_PortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Local_PortActionPerformed
	        // TODO add your handling code here:
	    }//GEN-LAST:event_Local_PortActionPerformed

	    private void Remot_IPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Remot_IPActionPerformed
	        // TODO add your handling code here:
	    }//GEN-LAST:event_Remot_IPActionPerformed

	    private void Remot_PortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Remot_PortActionPerformed
	        // TODO add your handling code here:
	    }//GEN-LAST:event_Remot_PortActionPerformed

	    private void sendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendActionPerformed
	        // TODO add your handling code here:
	        try {
	            if (!conn) {
	                JOptionPane.showMessageDialog(null, "You can't send, pleace Login first");
	            } 
	            else if (Remot_IP.getText().equals("") || Remot_Port.getText().equals("")) {
	                JOptionPane.showMessageDialog(null, "You should select a user from the online user list");
	            } 
	            else if (inArea.getText().equals("") || inArea.getText().equals("enter text here")) {
	                JOptionPane.showMessageDialog(null, "You can't send empty message");
	            } else {
	            	 Calendar C= new GregorianCalendar();
		                int sec = C.get(Calendar.SECOND);
		                int min= C.get(Calendar.MINUTE);
		                int hr = C.get(Calendar.HOUR);
	            	
	                userName = username.getText();
	                remotIp = Remot_IP.getText();
	                remotPort = Integer.parseInt(Remot_Port.getText());
	                remot_IPAddress = InetAddress.getByName(remotIp);
	                String msg = inArea.getText();
	                inArea.setText("");
	                StyledDocument doc = textPaneArea.getStyledDocument();
	                Style style = textPaneArea.addStyle("", null);
	                StyleConstants.setForeground(style, Color.RED);
	                StyleConstants.setBackground(style, Color.white);
	                String s1 = hr+":"+min+":"+sec+" ME: " + msg +	 "\n";
	                doc.insertString(doc.getLength(), s1, style);
	                msg = hr+":"+min+":"+sec +" "+userName + ": " + msg;
	                S_buffer = msg.getBytes();
	                sendpacket = new DatagramPacket(S_buffer, S_buffer.length, remot_IPAddress, remotPort);
	                socket.send(sendpacket);
	            }
	        } catch (UnknownHostException ex) {
	            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
	        } catch (IOException | BadLocationException ex) {
	            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
	        }
	    }//GEN-LAST:event_sendActionPerformed
	    
	    private void establishConnectionActionPerformed(java.awt.event.ActionEvent evt) {                                     
	      // TODO add your handling code here:
	       try {
	            if (!conn) {
	                JOptionPane.showMessageDialog(null, "You can't send, pleace Login first");
	            } 
	          
	             else if (inArea.getText().equals("") || inArea.getText().equals("enter text here")) {
	                JOptionPane.showMessageDialog(null, "You can't send empty message");
	            } 
	             else {
	            	 Calendar C= new GregorianCalendar();
		                int sec = C.get(Calendar.SECOND);
		                int min= C.get(Calendar.MINUTE);
		                int hr = C.get(Calendar.HOUR);
	            	 String msg = inArea.getText();
	            	 StyledDocument doc = textPaneArea.getStyledDocument();
		                
		               Style style = textPaneArea.addStyle("", null);
		                StyleConstants.setForeground(style, Color.RED);
		                StyleConstants.setBackground(style, Color.white);
		               String s1 = hr+":"+min+":"+sec +" ME: " + msg  + "\n";
		                doc.insertString(doc.getLength(), s1, style);
		                msg =  hr+":"+min+":"+sec +" "+ userName + ": " + msg  ;
		                S_buffer = msg.getBytes();
	            	
	            	for(int i = 0; i< online_user.getModel().getSize(); i++){
	            		
                    String s=  online_user.getModel().getElementAt(i);
                    String[] userInfo =s.split(",");        
                   
	               userName = username.getText();
	               remotIp = Remot_IP.getText();
	               // remotPort = Integer.parseInt(Remot_Port.getText());
	                //remot_IPAddress = InetAddress.getByName(remotIp);
	                remotPort =Integer.parseInt(userInfo[2]);
	                remot_IPAddress = InetAddress.getByName(userInfo[1]) ;
	               // String msg = inArea.getText();
	               
	                
	                if(! userInfo[2].equals(Local_Port)) {
	          
	                
	                sendpacket = new DatagramPacket(S_buffer, S_buffer.length, remot_IPAddress, remotPort);
	                socket.send(sendpacket);
	            }
	            	}
	            	
	            }
	        } catch (UnknownHostException ex) {
	            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
	        } 
	      
	      
	       catch (IOException | BadLocationException ex) {
	            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
	        }
	    }
		private void deleteallActionPerformed(java.awt.event.ActionEvent evt) {                                     
	      // TODO add your handling code here:
	       try {
	            if (!conn) {
	                JOptionPane.showMessageDialog(null, "You can't send, pleace Login first");
	            } 
	          
	             else if (inArea.getText().equals("") || inArea.getText().equals("enter text here")) {
	                JOptionPane.showMessageDialog(null, "You can't send empty message");
	            } 
	             else {
	            	 Calendar C= new GregorianCalendar();
		                int sec = C.get(Calendar.SECOND);
		                int min= C.get(Calendar.MINUTE);
		                int hr = C.get(Calendar.HOUR);
	            	 String msg = inArea.getText();
	            	 StyledDocument doc = textPaneArea.getStyledDocument();
		                
		               Style style = textPaneArea.addStyle("", null);
		                StyleConstants.setForeground(style, Color.RED);
		                StyleConstants.setBackground(style, Color.white);
		               String s1 = hr+":"+min+":"+sec +" ME: " + msg  + "\n";
		                doc.insertString(doc.getLength(), s1, style);
		                msg =  hr+":"+min+":"+sec +" "+ userName + ": " + msg  ;
		                S_buffer = msg.getBytes();
	            	
	            	for(int i = 0; i< online_user.getModel().getSize(); i++){
	            		
                    String s=  online_user.getModel().getElementAt(i);
                    String[] userInfo =s.split(",");        
                   
	               userName = username.getText();
	               remotIp = Remot_IP.getText();
	               // remotPort = Integer.parseInt(Remot_Port.getText());
	                //remot_IPAddress = InetAddress.getByName(remotIp);
	                remotPort =Integer.parseInt(userInfo[2]);
	                remot_IPAddress = InetAddress.getByName(userInfo[1]) ;
	               // String msg = inArea.getText();
	               
	                
	                if(! userInfo[2].equals(Local_Port)) {
	          
	                
	                sendpacket = new DatagramPacket(S_buffer, S_buffer.length, remot_IPAddress, remotPort);
	                socket.send(sendpacket);
	            }
	            	}
	            	
	            }
	        } catch (UnknownHostException ex) {
	            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
	        } 
	      
	      
	       catch (IOException | BadLocationException ex) {
	            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
	        }
	    }

		private void deleteActionPerformed(java.awt.event.ActionEvent evt) {                                     
	      // TODO add your handling code here:
	       try {
	            if (!conn) {
	                JOptionPane.showMessageDialog(null, "You can't send, pleace Login first");
	            } 
	          
	             else if (inArea.getText().equals("") || inArea.getText().equals("enter text here")) {
	                JOptionPane.showMessageDialog(null, "You can't send empty message");
	            } 
	             else {
	            	 Calendar C= new GregorianCalendar();
		                int sec = C.get(Calendar.SECOND);
		                int min= C.get(Calendar.MINUTE);
		                int hr = C.get(Calendar.HOUR);
	            	 String msg = inArea.getText();
	            	 StyledDocument doc = textPaneArea.getStyledDocument();
		                
		               Style style = textPaneArea.addStyle("", null);
		                StyleConstants.setForeground(style, Color.RED);
		                StyleConstants.setBackground(style, Color.white);
		               String s1 = hr+":"+min+":"+sec +" ME: " + msg  + "\n";
		                doc.insertString(doc.getLength(), s1, style);
		                msg =  hr+":"+min+":"+sec +" "+ userName + ": " + msg  ;
		                S_buffer = msg.getBytes();
	            	
	            	for(int i = 0; i< online_user.getModel().getSize(); i++){
	            		
                    String s=  online_user.getModel().getElementAt(i);
                    String[] userInfo =s.split(",");        
                   
	               userName = username.getText();
	               remotIp = Remot_IP.getText();
	               // remotPort = Integer.parseInt(Remot_Port.getText());
	                //remot_IPAddress = InetAddress.getByName(remotIp);
	                remotPort =Integer.parseInt(userInfo[2]);
	                remot_IPAddress = InetAddress.getByName(userInfo[1]) ;
	               // String msg = inArea.getText();
	               
	                
	                if(! userInfo[2].equals(Local_Port)) {
	          
	                
	                sendpacket = new DatagramPacket(S_buffer, S_buffer.length, remot_IPAddress, remotPort);
	                socket.send(sendpacket);
	            }
	            	}
	            	
	            }
	        } catch (UnknownHostException ex) {
	            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
	        } 
	      
	      
	       catch (IOException | BadLocationException ex) {
	            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
	        }
	    }




	 private void sendToAllActionPerformed(java.awt.event.ActionEvent evt) {                                     
	      // TODO add your handling code here:
	       try {
	            if (!conn) {
	                JOptionPane.showMessageDialog(null, "You can't send, pleace Login first");
	            } 
	          
	             else if (inArea.getText().equals("") || inArea.getText().equals("enter text here")) {
	                JOptionPane.showMessageDialog(null, "You can't send empty message");
	            } 
	             else {
	            	 Calendar C= new GregorianCalendar();
		                int sec = C.get(Calendar.SECOND);
		                int min= C.get(Calendar.MINUTE);
		                int hr = C.get(Calendar.HOUR);
	            	 String msg = inArea.getText();
	            	 StyledDocument doc = textPaneArea.getStyledDocument();
		                
		               Style style = textPaneArea.addStyle("", null);
		                StyleConstants.setForeground(style, Color.RED);
		                StyleConstants.setBackground(style, Color.white);
		               String s1 = hr+":"+min+":"+sec +" ME: " + msg  + "\n";
		                doc.insertString(doc.getLength(), s1, style);
		                msg =  hr+":"+min+":"+sec +" "+ userName + ": " + msg  ;
		                S_buffer = msg.getBytes();
	            	
	            	for(int i = 0; i< online_user.getModel().getSize(); i++){
	            		
                    String s=  online_user.getModel().getElementAt(i);
                    String[] userInfo =s.split(",");        
                   
	               userName = username.getText();
	               remotIp = Remot_IP.getText();
	               // remotPort = Integer.parseInt(Remot_Port.getText());
	                //remot_IPAddress = InetAddress.getByName(remotIp);
	                remotPort =Integer.parseInt(userInfo[2]);
	                remot_IPAddress = InetAddress.getByName(userInfo[1]) ;
	               // String msg = inArea.getText();
	               
	                
	                if(! userInfo[2].equals(Local_Port)) {
	          
	                
	                sendpacket = new DatagramPacket(S_buffer, S_buffer.length, remot_IPAddress, remotPort);
	                socket.send(sendpacket);
	            }
	            	}
	            	
	            }
	        } catch (UnknownHostException ex) {
	            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
	        } 
	      
	      
	       catch (IOException | BadLocationException ex) {
	            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
	        }
	    }

	 
	    private void statusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statusActionPerformed
	        // TODO add your handling code here:
	    }//GEN-LAST:event_statusActionPerformed

	    private void inAreaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_inAreaFocusGained
	        // TODO add your handling code here:
	        if (inArea.getText().equals("enter text here")) {
	            inArea.setText("");
	            inArea.setForeground(Color.BLACK);
	        }
	    }//GEN-LAST:event_inAreaFocusGained

	    private void inAreaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_inAreaFocusLost
	        // TODO add your handling code here:
	        if (inArea.getText().isEmpty()) {
	            inArea.setForeground(Color.GRAY);
	            inArea.setText("enter text here");
	        }
	    }//GEN-LAST:event_inAreaFocusLost

	    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
	        if (logedin) {
	            JOptionPane.showMessageDialog(null, "You are loged out successfully");
	            logedin = false;
	            t1= false;
	            j = false;

	            try {
	                String localIp1 = Local_IP.getText();
	                int localPort1 = Integer.parseInt(Local_Port.getText());
	                InetAddress remot_IPAddress1 = InetAddress.getByName(localIp1);
	                String msg = "logout";
	                S_buffer = msg.getBytes();
	                sendpacket = new DatagramPacket(S_buffer, S_buffer.length, remot_IPAddress1, localPort1);
	                socket.send(sendpacket);
	            } catch (IOException ex) {
	                Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
	            }
	            String s = "logout";
	            try {
	                dataToServer.writeUTF(s);

	            } catch (IOException ex) {
	                Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
	            }
	            dlm.clear();

	            try {
	                socket.close();
	                serverSocket.close();
	                DataInputStream.close();
	                dataFromServer.close();
	                dataToServer.close();

	            } catch (IOException ex) {
	                Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
	            }

	        } else {
	            JOptionPane.showMessageDialog(null, "You are already loged out");
	        }

	    }//GEN-LAST:event_jButton2ActionPerformed

	    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
	        // TODO add your handling code here:
	    }//GEN-LAST:event_formWindowClosing

	    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
	        // TODO add your handling code here:
	    }//GEN-LAST:event_formWindowClosed

	    private void online_userValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_online_userValueChanged
	        // TODO add your handling code here:
	        try {
	            int x = online_user.getModel().getSize();
	            if (!evt.getValueIsAdjusting() && x != 0) {
	                String s = (online_user.getSelectedValue().toString());
	                String[] tokens = s.split(",");
	                Remot_IP.setText(tokens[1]);
	                Remot_Port.setText(tokens[2]);
	            }
	        } catch (Exception ex) {
	        }
	    }//GEN-LAST:event_online_userValueChanged
	    void receive() {
	        try {
	            if (t1) {
	                StyledDocument doc = textPaneArea.getStyledDocument();
	                Style style = textPaneArea.addStyle("", null);
	                socket.receive(receive_packet);
	                String msg = new String(R_buffer, 0, receive_packet.getLength());
	                String msgMap[]=msg.split(" ");
	                if(ColorsMap.containsKey(msgMap[1]))
	                {
	                	float []values=ColorsMap.get(msgMap[1]);
		                StyleConstants.setForeground(style,new java.awt.Color(values[0], values[1], values[2]));
	                }
	                else
	                {
	                	float []values= {1,1,1};
	                	values[0]=(float)Math.random();
	                	values[1]=(float)Math.random();
	                	values[2]=(float)Math.random();
	                	ColorsMap.put(msgMap[1], values);
		                StyleConstants.setForeground(style,new java.awt.Color(values[0], values[1], values[2]));

	                }
	                if (msg.equals("logout")) {
	                    return;
	                }
	                InetAddress S_IPAddress = receive_packet.getAddress();
	                int Sport = receive_packet.getPort();
	                
	                
	                StyleConstants.setBackground(style, Color.white);
	                String s1 = msg + "\n";
	                doc.insertString(doc.getLength(), s1, style);
	                String s = S_IPAddress.getHostAddress();
	                status.setText("Received From IP= " + s + ", port: " + Sport);
	            }
	        } catch (IOException | BadLocationException ex) {

	        }
	    }

	    /**
	     * @param args the command line arguments
	     */
	    public static void main(String args[]) {
	        /* Set the Nimbus look and feel */
	        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
	        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
	         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
	         */
	        try {
	            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
	                if ("Nimbus".equals(info.getName())) {
	                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
	                    break;
	                }
	            }
	        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
	            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	        }
	        //</editor-fold>
	        //</editor-fold>

	        //</editor-fold>
	        //</editor-fold>

	        /* Create and display the form */
	        java.awt.EventQueue.invokeLater(() -> {
	        	Client c=new Client();
	           new Client().setResizable(false);
	            c.setVisible(true);
	            c.setSize(2000,600);
	            c.setResizable(false);
	            
	        });
	    }

	    // Variables declaration - do not modify//GEN-BEGIN:variables
	    private javax.swing.JTextField Local_IP;
	    private javax.swing.JTextField Local_Port;
	    private javax.swing.JTextField Remot_IP;
	    private javax.swing.JTextField Remot_Port;
	    private javax.swing.JTextArea inArea;
	    private javax.swing.JButton jButton2;
	    private javax.swing.JButton jButton3;
	    private javax.swing.JButton Delete;
	    private javax.swing.JButton Deleteall;
	    private javax.swing.JComboBox<String> jComboBox1;
	    private javax.swing.JLabel jLabel1;
	    private javax.swing.JLabel jLabel10;
	    private javax.swing.JLabel jLabel2;
	    private javax.swing.JLabel jLabel3;
	    private javax.swing.JLabel jLabel4;
	    private javax.swing.JLabel jLabel5;
	    private javax.swing.JLabel jLabel6;
	    private javax.swing.JLabel jLabel7;
	    private javax.swing.JLabel jLabel8;
	    private javax.swing.JLabel jLabel9;
	    private javax.swing.JPanel jPanel1;
	    private javax.swing.JScrollPane jScrollPane2;
	    private javax.swing.JScrollPane jScrollPane3;
	    private javax.swing.JScrollPane jScrollPane4;
	    private javax.swing.JButton login;
	    private javax.swing.JList<String> online_user;
	    private javax.swing.JButton send;
	    private javax.swing.JButton sendToAll;
	    private javax.swing.JTextField serIp;
	    private javax.swing.JTextField serPort;
	    private javax.swing.JTextField status;
	    private javax.swing.JTextPane textPaneArea;
	    private javax.swing.JTextField username;
	    private javax.swing.JTextField password;
	    private  Map<String, float[]> ColorsMap;
	    
	    // End of variables declaration//GEN-END:variables

}
